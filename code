import tkinter as tk
from tkinter import ttk
import win32com.client as win32
import json
from datetime import datetime, timedelta

# Define the press status options and their associated colors
PRESS_STATUS_OPTIONS = [
    ('Up & Running', 'green'),
    ('Running with limitation', 'orange'),
    ('Proactive shutdown', '#999900'),
    ('Pending customer', 'purple'),
    ('MD - Troubleshooting', 'red'),
    ('MD - Waiting for parts', 'red'),
    ('MD - Escalation', 'red')
]
SHIFT_OPTIONS = ['Morning', 'Noon', 'Night']

def load_general_info_data():
    with open('data/general_info_data.txt') as f:
        data = json.load(f)

    today = datetime.today()

    for key in ["SW Version", "PLC Version", "DFE Version"]:
        change_date_key = f"{key} Change Date"
        if change_date_key in data:
            change_date = datetime.strptime(data[change_date_key], '%Y-%m-%d')
            days_diff = (today - change_date).days

            if days_diff == 0:
                data[key] += "<br><span style='font-size: 12px; color: green;'>(updated today)</span>"
            elif days_diff <= 14:
                data[key] += "<br><span style='font-size: 12px; color: orange;'>(recently updated)</span>"

    return data

def get_day_counters(press_status):
    with open('data/general_info_data.txt', 'r') as f:
        data = json.load(f)

    last_press_status = data.get("Last Press State", "")
    same_state_days = int(data.get("Same State Days Counter", "0"))
    md_state_days = int(data.get("MD State Days Counter", "0"))

    if press_status == last_press_status:
        same_state_days += 1
        if press_status.startswith("MD"):
            md_state_days += 1
    else:
        same_state_days = 1
        if press_status.startswith("MD"):
            if last_press_status.startswith("MD"):
                md_state_days += 1
            else:
                md_state_days = 1

    return same_state_days, md_state_days

# Create the main window
window = tk.Tk()

# Create the StringVar after the Tk instance
press_status_var = tk.StringVar()
shift_vars = [tk.StringVar() for _ in SHIFT_OPTIONS]

# Lists to hold all the highlight entries and issue entries
highlight_entries = []
issue_entries = []



# Function to add a new highlight entry field
def add_highlight_entry():
    frame = tk.Frame(highlights_frame)
    entry = tk.Entry(frame, width=70)
    delete_button = tk.Button(frame, text="Delete", command=lambda: delete_entry(frame, entry, highlight_entries))

    entry.grid(row=0, column=0, sticky='we')
    delete_button.grid(row=0, column=1)

    frame.grid_columnconfigure(0, weight=1)
    frame.grid(row=len(highlight_entries), column=0, sticky="we") 

    highlight_entries.append((frame, entry))

    # Rearrange elements
    rearrange_elements()



# Function to add a new issue entry field
def add_issue_entry():
    frame = tk.Frame(window)
    case_entry = tk.Entry(frame, width=20)
    description_entry = tk.Entry(frame, width=30)
    update_entry = tk.Entry(frame, width=20)
    delete_button = tk.Button(frame, text="Delete", command=lambda: delete_entry(frame, (case_entry, description_entry, update_entry), issue_entries))

    case_label = tk.Label(frame, text="Case Number:")
    description_label = tk.Label(frame, text="Description:")
    update_label = tk.Label(frame, text="Update:")

    case_label.grid(row=0, column=0)
    case_entry.grid(row=1, column=0, sticky='we')
    description_label.grid(row=0, column=1)
    description_entry.grid(row=1, column=1, sticky='we')
    update_label.grid(row=0, column=2)
    update_entry.grid(row=1, column=2, sticky='we')
    delete_button.grid(row=0, column=3, rowspan=2)

    frame.grid_columnconfigure(0, weight=1)
    frame.grid_columnconfigure(1, weight=1)
    frame.grid_columnconfigure(2, weight=1)
    frame.grid(row=len(highlight_entries) + len(issue_entries) + 6, column=0, sticky="we")

    issue_entries.append((frame, (case_entry, description_entry, update_entry)))

    # Rearrange elements
    rearrange_elements()

# Function to delete an entry field
def delete_entry(frame, entry, entries_list):
    frame.grid_forget()
    entries_list.remove((frame, entry))

    # Rearrange the elements in the window
    rearrange_elements()

# Function to rearrange the elements in the window
def rearrange_elements():
    for i, (frame, _) in enumerate(highlight_entries):
        frame.grid(row=i + 3, column=0)  # +3 to leave space for the labels and 'Add Highlight' button

    add_highlight_button.grid(row=len(highlight_entries) + 3, column=0) # move the 'Add Highlight' button

    separator.grid(row=len(highlight_entries) + 4, column=0, sticky="we", padx=5, pady=5) # move the separator

    issue_label.grid(row=len(highlight_entries) + 5, column=0, sticky="w") # move the 'Main Open Issues' label

    for i, (frame, _) in enumerate(issue_entries):
        frame.grid(row=len(highlight_entries) + i + 6, column=0)  # +6 to leave space for the labels and 'Add Issue' button

    add_issue_button.grid(row=len(highlight_entries) + len(issue_entries) + 6, column=0) # move the 'Add Issue' button

# Function to create an HTML table from the given data
def create_html_table(data):
    html_table = "<table style='border-collapse: collapse; width: 100%;'>"
    for row in data:
        html_table += "<tr>"
        for cell in row:
            title, content = cell
            html_table += f"<td style='border: 1px solid #000; padding: 5px; text-align:center;'>\
                            <div style='font-weight: normal;'>{title}</div>\
                            <div style='font-weight: bold;'>{content}</div>\
                           </td>"
        html_table += "</tr>"
    html_table += "</table>"
    return html_table

# Load the general info data
general_info_data = load_general_info_data()

# Get the stored shifts, if any
stored_shifts = general_info_data.get("Shift", [])

# Update shift_vars according to the stored shifts
for i, var in enumerate(shift_vars):
    if SHIFT_OPTIONS[i] in stored_shifts:
        var.set(SHIFT_OPTIONS[i])


# Function to open Outlook with the entered details
def open_outlook():
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.To = "tal.elazar@hp.com"

    # Load the general info data
    general_info_data = load_general_info_data()

    # Get the press status and color
    press_status = press_status_var.get()
    color = 'black'
    for status, status_color in PRESS_STATUS_OPTIONS:
        if status == press_status:
            color = status_color
            break

    # Get the day counters without updating the text file
    same_state_days, md_state_days = get_day_counters(press_status)

    # Format the 'Press Status' cell
    press_status_str = f'<span style="color:{color};">{press_status}</span>'
    if press_status.startswith("MD"):
        press_status_str += f'<br><span style="font-size: 12px;">({same_state_days} days, total {md_state_days} MD)</span>'
    else:
        press_status_str += f'<br><span style="font-size: 12px;">({same_state_days} days)</span>'
    general_info_data["Press Status"] = press_status_str

    # Define table data with loaded general info
    table_data = [
        [("End User", general_info_data.get("End User", "")),
        ("Serial Number", general_info_data.get("Serial Number", "")),
        ("Location", general_info_data.get("Location", ""))],

        [("SW Version", general_info_data.get("SW Version", "")),
        ("PLC Version", general_info_data.get("PLC Version", "")),
        ("DFE Version", general_info_data.get("DFE Version", ""))],

        [("WWTS FSE", general_info_data.get("WWTS FSE", "")),
        ("Local FSE", general_info_data.get("Local FSE", "")),
        ("Local T3/Other", general_info_data.get("Local T3/Other", ""))],

        [("Date", general_info_data.get("Date", "")),
        ("Press Status", general_info_data.get("Press Status", "")),
        ("Shift", " + ".join(var.get() for var in shift_vars if var.get()))]
    ]


    # Create HTML bullet list for highlights
    highlights_html = ''
    for _, entry in highlight_entries:
        point = entry.get()
        if point:  # Avoid adding empty bullet points
            highlights_html += f'<li>{point}</li>'
    highlights_html = f'<h2 style="color:green;">Highlights</h2><ul>{highlights_html}</ul>' if highlights_html else ''

    # Create HTML bullet list for issues
    issues_html = ''
    for _, (case_entry, description_entry, update_entry) in issue_entries:
        case = case_entry.get()
        description = description_entry.get()
        update = update_entry.get()
        if description or (case and update):  # Add issue if a description and/or a case number + update is entered
            case_part = f'<a href="http://example.com/{case or ""}" style="color:black;">{case}</a> - ' if case else ""
            description_part = f'{description}' + (' - ' if description and update else '') if description else ""
            update_part = f'<b>{update}</b>' if update else ""
            issues_html += f'<li>{case_part}{description_part}{update_part}</li>'
    issues_html = f'<h2 style="color:red;">Main Open Issues</h2><ul>{issues_html}</ul>' if issues_html else ''

    # HTML body
    html = f"""
    <html>
    <body>
    <img src="https://raw.githubusercontent.com/takin15/tal/main/V12.jpg" alt="Top image"><br>
    <h1 style="text-align:center; margin-bottom:0;">General Information</h1><br>
    {create_html_table(table_data)}<br>
    <h1 style="text-align:center;">Executive Summary</h1><br>
    {highlights_html}<br>
    {issues_html}<br>
    <h1 style="text-align:center;">Main Production Support</h1><br>
    <h1 style="text-align:center;">Supportive pictures</h1><br>
    </body>
    </html>
    """
    mail.HTMLBody = html
    mail.Display(True)

# Create a new Tkinter window
# = tk.Tk()

# Create frames for each section
press_status_frame = tk.Frame(window)
shift_frame = tk.Frame(window)
highlights_frame = tk.Frame(window)

# Create a label and a combo box for the "Press Status" in the main window
press_status_label = tk.Label(press_status_frame, text="Press Status:")
press_status_label.grid(row=0, column=0, sticky="w")

press_status_combo = ttk.Combobox(press_status_frame, textvariable=press_status_var)
press_status_combo['values'] = [status[0] for status in PRESS_STATUS_OPTIONS]
press_status_combo.grid(row=0, column=1, sticky="we")

shift_label = tk.Label(shift_frame, text="Shift:")
shift_label.grid(row=0, column=0, sticky="w")

for i, shift in enumerate(SHIFT_OPTIONS):
    shift_checkbutton = tk.Checkbutton(shift_frame, text=shift, variable=shift_vars[i], onvalue=shift, offvalue="")
    shift_checkbutton.grid(row=0, column=i+1)  # Changed row for shift checkbuttons

# Place the frames and a separator on the window
press_status_frame.grid(row=0, column=0, sticky="we", padx=5, pady=5)
shift_frame.grid(row=1, column=0, sticky="we", padx=5, pady=5)  # Shift frame below the Press Status frame
tk.Frame(window, height=2, bd=1, relief=tk.SUNKEN).grid(row=2, column=0, sticky="we", padx=5, pady=5)  # separator

# Move "Highlights" elements to the highlights frame
highlight_label = tk.Label(highlights_frame, text="Highlights:")
highlight_label.grid(row=0, column=0, sticky="w")

add_highlight_button = tk.Button(highlights_frame, text="Add Highlight", command=add_highlight_entry)
#add_highlight_button.grid(row=0, column=1, sticky="e")  # Changed row and column for "Add Highlight" button

# Highlights frame grid placement
highlights_frame.grid(row=3, column=0, sticky="we", padx=5, pady=5)  # Highlights frame below the separator

# Separator is defined here
separator = tk.Frame(window, height=2, bd=1, relief=tk.SUNKEN)
separator.grid(row=4, column=0, sticky="we", padx=5, pady=5)  # initial placement of separator

# Other elements
issue_label = tk.Label(window, text="Main Open Issues:")
issue_label.grid(row=4, column=0, sticky="w")

add_issue_button = tk.Button(window, text="Add Issue", command=add_issue_entry)

submit_button = tk.Button(window, text="Open in Outlook", command=open_outlook)
submit_button.grid(row=1000, column=0, sticky="we")  # large row index to always keep it at the bottom


# Add initial highlight and issue entry rows
add_highlight_entry()
add_issue_entry()

# Start the Tkinter event loop
window.grid_columnconfigure(0, weight=1)
window.mainloop()
